name: E2E
on:
  push:
    branches: [main]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  e2e:
    runs-on: ubuntu-latest
    # was 45m, CI was getting cancelled near the end → give it more room
    timeout-minutes: 60
    env:
      # --- CI / relaxed mode for scripts/validate-env.ts ---
      CI: true
      SKIP_STRICT_ENV: 1

      # --- your existing envs ---
      BASE_URL: ${{ secrets.BASE_URL }}
      NEXT_PUBLIC_BASE_URL: ${{ secrets.BASE_URL }}
      CRON_SECRET: ${{ secrets.CRON_SECRET }}
      PREVIEW_SECRET: ${{ secrets.PREVIEW_SECRET }}
      ADMIN_JWT_SECRET: ${{ secrets.ADMIN_JWT_SECRET }}

      # --- the ones that were missing in the log ---
      FIREBASE_SERVICE_ACCOUNT_JSON: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON }}
      FIREBASE_SERVICE_ACCOUNT_JSON_B64: ${{ secrets.FIREBASE_SERVICE_ACCOUNT_JSON_B64 }}
      FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}
      NEXT_PUBLIC_FIREBASE_STORAGE_BUCKET: ${{ secrets.FIREBASE_STORAGE_BUCKET }}

      # write SA here (no VS Code complaints)
      GOOGLE_APPLICATION_CREDENTIALS: /tmp/firebase-sa.json

      # so client-side E2E flag stops warning
      NEXT_PUBLIC_E2E: "1"

    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v5
        # v4.2.2: https://github.com/actions/checkout/releases/tag/v4.2.2

      # ✅ Fallback to ensure pnpm is on PATH even if Corepack has issues
      # (moved BEFORE setup-node so cache: pnpm won't fail)
      - name: Install pnpm on PATH (fallback)
        uses: pnpm/action-setup@v4
        with:
          run_install: false
          # Do NOT set "version" if package.json has "packageManager": "pnpm@..."

      - uses: actions/setup-node@v4
        # v4.1.0: https://github.com/actions/setup-node/releases/tag/v4.1.0
        with:
          node-version-file: '.nvmrc'
          # ❌ removed cache: pnpm because we already cache ~/.pnpm-store
          # cache: pnpm
          # cache-dependency-path: pnpm-lock.yaml

      - name: Enable Corepack
        run: corepack enable

      - name: Activate pnpm
        run: |
          PNPM_VERSION=$(node -p "require('./package.json').packageManager?.split('@')[1] ?? ''")
          if [ -n "$PNPM_VERSION" ]; then
            corepack prepare "pnpm@${PNPM_VERSION}" --activate
          else
            corepack prepare pnpm@9 --activate
          fi

      # ✅ Extra safety: if for some reason pnpm is still not on PATH, install it now
      - name: Ensure pnpm is available
        run: |
          if ! command -v pnpm >/dev/null 2>&1; then
            echo "pnpm not found on PATH. Installing via Corepack..."
            corepack prepare pnpm@9 --activate
          fi
          pnpm --version

      - name: Show tool versions
        run: |
          node -v
          pnpm --version

      - name: Configure pnpm store dir for stable caching
        run: pnpm config set store-dir ~/.pnpm-store

      # ✅ actually cache the pnpm store
      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Assert pnpm version
        run: node .github/scripts/assert-pnpm-version.mjs

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # 🔐 write the Firebase service account to the path we set above
      - name: Write Firebase service account
        run: |
          if [ -n "${FIREBASE_SERVICE_ACCOUNT_JSON}" ]; then
            echo "${FIREBASE_SERVICE_ACCOUNT_JSON}" > "${GOOGLE_APPLICATION_CREDENTIALS}"
          elif [ -n "${FIREBASE_SERVICE_ACCOUNT_JSON_B64}" ]; then
            echo "${FIREBASE_SERVICE_ACCOUNT_JSON_B64}" | base64 -d > "${GOOGLE_APPLICATION_CREDENTIALS}"
          else
            echo "Missing FIREBASE_SERVICE_ACCOUNT_JSON or FIREBASE_SERVICE_ACCOUNT_JSON_B64" >&2
            exit 1
          fi

      # ✅ Install Playwright browsers and required OS deps directly
      - name: Install Playwright browsers & OS deps
        run: pnpm exec playwright install --with-deps

      - name: Build app (prod)
        env:
          CI: "true"
          SKIP_STRICT_ENV: "1"
          NEXT_TELEMETRY_DISABLED: "1"
        run: pnpm build

      # 👇 FIXED: removed extra `--` so Playwright sees these as flags
      - name: Run E2E tests
        env:
          # --- Minimal, safe test env ---
          NODE_ENV: test
          NEXT_TELEMETRY_DISABLED: '1'
          E2E: 'true'
          TEST_MODE: 'true'
          ADMIN_AUTH_DISABLED: '1'
          ADMIN_BYPASS: 'true'
          NEXT_PUBLIC_REQUIRE_ADMIN_EMAIL_VERIFICATION: 'false'
        run: pnpm e2e --project=chromium-light --max-failures=1 --reporter=list
