name: E2E
on:
  push:
    branches: [main]
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  e2e:
    runs-on: ubuntu-latest
    timeout-minutes: 45
    env:
      BASE_URL: ${{ secrets.BASE_URL }}
      NEXT_PUBLIC_BASE_URL: ${{ secrets.BASE_URL }}
      CRON_SECRET: ${{ secrets.CRON_SECRET }}

    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
        # v4.2.2: https://github.com/actions/checkout/releases/tag/v4.2.2

      # ✅ Fallback to ensure pnpm is on PATH even if Corepack has issues
      # (moved BEFORE setup-node so cache: pnpm won't fail)
      - name: Install pnpm on PATH (fallback)
        uses: pnpm/action-setup@v4
        with:
          run_install: false
          # Do NOT set "version" if package.json has "packageManager": "pnpm@..."

      - uses: actions/setup-node@v4
        # v4.1.0: https://github.com/actions/setup-node/releases/tag/v4.1.0
        with:
          node-version-file: '.nvmrc'
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Enable Corepack
        run: corepack enable

      - name: Activate pnpm
        run: |
          PNPM_VERSION=$(node -p "require('./package.json').packageManager?.split('@')[1] ?? ''")
          if [ -n "$PNPM_VERSION" ]; then
            corepack prepare "pnpm@${PNPM_VERSION}" --activate
          else
            corepack prepare pnpm@9 --activate
          fi

      # ✅ Extra safety: if for some reason pnpm is still not on PATH, install it now
      - name: Ensure pnpm is available
        run: |
          if ! command -v pnpm >/dev/null 2>&1; then
            echo "pnpm not found on PATH. Installing via Corepack..."
            corepack prepare pnpm@9 --activate
          fi
          pnpm --version

      - name: Show tool versions
        run: |
          node -v
          pnpm --version

      - name: Configure pnpm store dir for stable caching
        run: pnpm config set store-dir ~/.pnpm-store

      - name: Assert pnpm version
        run: node .github/scripts/assert-pnpm-version.mjs

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # ✅ Install Playwright browsers and required OS deps directly
      - name: Install Playwright browsers & OS deps
        run: pnpm exec playwright install --with-deps

      - name: Build app (prod)
        env:
          CI: "true"
          NEXT_TELEMETRY_DISABLED: "1"
        run: pnpm build

      - name: Run E2E tests
        env:
          # --- Minimal, safe test env ---
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: '1'
          E2E: 'true'
          TEST_MODE: 'true'
          ADMIN_AUTH_DISABLED: '1'     # make sure your server respects this
          ADMIN_BYPASS: 'true'
          NEXT_PUBLIC_REQUIRE_ADMIN_EMAIL_VERIFICATION: 'false'
          # Provide a stub service account to satisfy init code paths
          FIREBASE_SERVICE_ACCOUNT_JSON: |
            {
              "type": "service_account",
              "project_id": "test-project",
              "private_key_id": "test-key-id",
              "private_key": "-----BEGIN PRIVATE KEY-----\nMIIB...test\n-----END PRIVATE KEY-----\n",
              "client_email": "test@example.iam.gserviceaccount.com",
              "client_id": "1234567890",
              "auth_uri": "https://accounts.google.com/o/oauth2/auth",
              "token_uri": "https://oauth2.googleapis.com/token",
              "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
              "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/test"
            }
        run: pnpm e2e
