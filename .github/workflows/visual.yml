name: Visual snapshots

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      mode:
        description: "choose update or verify"
        required: true
        default: "update"
        type: choice
        options: [update, verify]
  pull_request:
    types: [labeled, opened, synchronize]
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  visual:
    if: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'update-visuals') || github.event.inputs.mode == 'update' || github.event.inputs.mode == 'verify' }}
    runs-on: ubuntu-latest
    timeout-minutes: 45
    container: mcr.microsoft.com/playwright:v1.47.0-jammy
    permissions:
      contents: write
    env:
      # make env validation chill in CI
      CI: true
      SKIP_STRICT_ENV: 1
      BASE_URL: ${{ secrets.BASE_URL }}
      NEXT_PUBLIC_BASE_URL: ${{ secrets.BASE_URL }}
      CRON_SECRET: ${{ secrets.CRON_SECRET }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # ✅ make pnpm exist in the container before setup-node tries to cache it
      - name: Install pnpm on PATH (fallback)
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version-file: '.nvmrc'

      - name: Enable Corepack
        run: corepack enable

      - name: Activate pnpm
        run: |
          PNPM_VERSION=$(node -p "require('./package.json').packageManager?.split('@')[1] ?? ''")
          if [ -n "$PNPM_VERSION" ]; then
            corepack prepare "pnpm@${PNPM_VERSION}" --activate
          else
            corepack prepare pnpm@9 --activate
          fi

      - name: Show tool versions
        run: |
          node -v
          pnpm --version

      - name: Configure pnpm store dir for stable caching
        run: pnpm config set store-dir ~/.pnpm-store

      - name: Assert pnpm version
        run: node .github/scripts/assert-pnpm-version.mjs

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      # ⬇️ build should EXIT (the old step stayed running, so the job got "context canceled")
      - name: Build app for e2e
        env:
          CI: "true"
          NEXT_TELEMETRY_DISABLED: "1"
        run: pnpm -s build

      # ⬇️ start the test server in background so visual steps can hit http://127.0.0.1:3000
      - name: Start app for visual run
        env:
          CI: "true"
          NEXT_TELEMETRY_DISABLED: "1"
          SKIP_STRICT_ENV: "1"
        run: |
          pnpm -s exec tsx scripts/start-test.ts --port 3000 &
          echo $! > /tmp/next.pid

      - name: Wait for app
        run: npx wait-on http://127.0.0.1:3000

      - name: Update snapshots
        if: ${{ github.event.inputs.mode == 'update' || contains(github.event.pull_request.labels.*.name, 'update-visuals') }}
        run: pnpm -s visual:update

      - name: Commit snapshot changes
        if: ${{ github.event.inputs.mode == 'update' || contains(github.event.pull_request.labels.*.name, 'update-visuals') }}
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            git config user.email "actions@users.noreply.github.com"
            git config user.name "github-actions"
            git add tests/admin-login-legal-visual.spec.ts-snapshots/
            git commit -m "test(visual): update admin login legal snapshots [ci skip]"
            git push
          else
            echo "No snapshot changes to commit."
          fi

      - name: Verify tests pass without updating
        run: pnpm -s visual:test

      # ⬇️ always stop the background Next.js server so the job doesn't hang
      - name: Stop app
        if: always()
        run: |
          if [ -f /tmp/next.pid ]; then
            kill "$(cat /tmp/next.pid)" || true
          fi
