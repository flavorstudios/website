name: Visual snapshots

on:
  workflow_dispatch:
    inputs:
      mode:
        description: "choose update or verify"
        required: true
        default: "update"
        type: choice
        options: [update, verify]
  pull_request:
    types: [labeled, opened, synchronize]
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

jobs:
  visual:
    if: ${{ github.event_name != 'pull_request' || contains(github.event.pull_request.labels.*.name, 'update-visuals') || github.event.inputs.mode == 'update' || github.event.inputs.mode == 'verify' }}
    runs-on: ubuntu-latest
    timeout-minutes: 45
    container: mcr.microsoft.com/playwright:v1.47.0-jammy
    permissions:
      contents: write
    env:
      BASE_URL: ${{ secrets.BASE_URL }}
      NEXT_PUBLIC_BASE_URL: ${{ secrets.BASE_URL }}
      CRON_SECRET: ${{ secrets.CRON_SECRET }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        # v4.2.2: https://github.com/actions/checkout/releases/tag/v4.2.2
        with:
          fetch-depth: 0

      # âœ… make pnpm exist in the container before setup-node tries to cache it
      - name: Install pnpm on PATH (fallback)
        uses: pnpm/action-setup@v4
        with:
          run_install: false
          # Do NOT set "version" if package.json has "packageManager": "pnpm@..."

      - name: Setup Node
        uses: actions/setup-node@v4
        # v4.1.0: https://github.com/actions/setup-node/releases/tag/v4.1.0
        with:
          node-version-file: '.nvmrc'
          cache: pnpm
          cache-dependency-path: pnpm-lock.yaml

      - name: Enable Corepack
        run: corepack enable

      - name: Activate pnpm
        run: |
          PNPM_VERSION=$(node -p "require('./package.json').packageManager?.split('@')[1] ?? ''")
          if [ -n "$PNPM_VERSION" ]; then
            corepack prepare "pnpm@${PNPM_VERSION}" --activate
          else
            corepack prepare pnpm@9 --activate
          fi

      - name: Show tool versions
        run: |
          node -v
          pnpm --version

      - name: Configure pnpm store dir for stable caching
        run: pnpm config set store-dir ~/.pnpm-store

      - name: Assert pnpm version
        run: node .github/scripts/assert-pnpm-version.mjs

      - name: Cache pnpm store
        uses: actions/cache@v4
        # v4.2.2: https://github.com/actions/cache/releases/tag/v4.2.2
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build app for e2e
        env:
          CI: "true"
          NEXT_TELEMETRY_DISABLED: "1"
        run: pnpm -s e2e:build

      - name: Update snapshots
        if: ${{ github.event.inputs.mode == 'update' || contains(github.event.pull_request.labels.*.name, 'update-visuals') }}
        run: pnpm -s visual:update

      - name: Commit snapshot changes
        if: ${{ github.event.inputs.mode == 'update' || contains(github.event.pull_request.labels.*.name, 'update-visuals') }}
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            git config user.email "actions@users.noreply.github.com"
            git config user.name "github-actions"
            git add tests/admin-login-legal-visual.spec.ts-snapshots/
            git commit -m "test(visual): update admin login legal snapshots [ci skip]"
            git push
          else
            echo "No snapshot changes to commit."
          fi

      - name: Verify tests pass without updating
        run: pnpm -s visual:test
