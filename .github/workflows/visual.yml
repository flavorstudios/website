name: Visual snapshots

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      mode:
        description: "choose update or verify"
        required: true
        default: "verify"
        type: choice
        options: [update, verify]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: read

env:
  CI: true
  SKIP_STRICT_ENV: 1
  BASE_URL: ${{ secrets.BASE_URL }}
  NEXT_PUBLIC_BASE_URL: ${{ secrets.NEXT_PUBLIC_BASE_URL }}
  CRON_SECRET: ${{ secrets.CRON_SECRET }}

jobs:
  visual-smoke:
    name: Visual smoke (PR)
    if: github.event_name == 'pull_request' && !contains(github.event.pull_request.labels.*.name, 'update-visuals')
    runs-on: ubuntu-latest
    timeout-minutes: 35
    container: mcr.microsoft.com/playwright:v1.47.0-jammy
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm on PATH (fallback)
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version-file: '.nvmrc'

      - name: Enable Corepack
        run: corepack enable

      - name: Activate pnpm
        run: |
          PNPM_VERSION=$(node -p "require('./package.json').packageManager?.split('@')[1] ?? ''")
          if [ -n "$PNPM_VERSION" ]; then
            corepack prepare "pnpm@${PNPM_VERSION}" --activate
          else
            corepack prepare pnpm@9 --activate
          fi

      - name: Show tool versions
        run: |
          node -v
          pnpm --version

      - name: Configure pnpm store dir for stable caching
        run: pnpm config set store-dir ~/.pnpm-store

      - name: Assert pnpm version
        run: node .github/scripts/assert-pnpm-version.mjs

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build app for smoke visuals
        env:
          NEXT_TELEMETRY_DISABLED: '1'
        run: pnpm -s e2e:build

      - name: Start app for visual run
        env:
          NEXT_TELEMETRY_DISABLED: '1'
        run: |
          pnpm -s exec tsx scripts/start-test.ts --port 3000 &
          echo $! > /tmp/next.pid

      - name: Wait for app
        run: npx wait-on http://127.0.0.1:3000

      - name: Run smoke visual tests
        timeout-minutes: 25
        run: pnpm -s visual:test:smoke

      - name: Stop app
        if: always()
        run: |
          if [ -f /tmp/next.pid ]; then
            kill "$(cat /tmp/next.pid)" || true
          fi

  visual-full:
    name: Visual snapshots (full)
    if: github.event_name == 'push' || (github.event_name == 'workflow_dispatch' && github.event.inputs.mode == 'verify')
    runs-on: ubuntu-latest
    timeout-minutes: 60
    container: mcr.microsoft.com/playwright:v1.47.0-jammy
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm on PATH (fallback)
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version-file: '.nvmrc'

      - name: Enable Corepack
        run: corepack enable

      - name: Activate pnpm
        run: |
          PNPM_VERSION=$(node -p "require('./package.json').packageManager?.split('@')[1] ?? ''")
          if [ -n "$PNPM_VERSION" ]; then
            corepack prepare "pnpm@${PNPM_VERSION}" --activate
          else
            corepack prepare pnpm@9 --activate
          fi

      - name: Show tool versions
        run: |
          node -v
          pnpm --version

      - name: Configure pnpm store dir for stable caching
        run: pnpm config set store-dir ~/.pnpm-store

      - name: Assert pnpm version
        run: node .github/scripts/assert-pnpm-version.mjs

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build app for visuals
        env:
          NEXT_TELEMETRY_DISABLED: '1'
        run: pnpm -s e2e:build

      - name: Start app for visual run
        env:
          NEXT_TELEMETRY_DISABLED: '1'
        run: |
          pnpm -s exec tsx scripts/start-test.ts --port 3000 &
          echo $! > /tmp/next.pid

      - name: Wait for app
        run: npx wait-on http://127.0.0.1:3000

      - name: Run full visual tests
        timeout-minutes: 50
        run: pnpm -s visual:test

      - name: Stop app
        if: always()
        run: |
          if [ -f /tmp/next.pid ]; then
            kill "$(cat /tmp/next.pid)" || true
          fi

  visual-update:
    name: Visual snapshots (update)
    if: github.event.inputs.mode == 'update' || (github.event_name == 'pull_request' && contains(github.event.pull_request.labels.*.name, 'update-visuals'))
    runs-on: ubuntu-latest
    timeout-minutes: 60
    container: mcr.microsoft.com/playwright:v1.47.0-jammy
    permissions:
      contents: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install pnpm on PATH (fallback)
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Setup Node
        uses: actions/setup-node@v6
        with:
          node-version-file: '.nvmrc'

      - name: Enable Corepack
        run: corepack enable

      - name: Activate pnpm
        run: |
          PNPM_VERSION=$(node -p "require('./package.json').packageManager?.split('@')[1] ?? ''")
          if [ -n "$PNPM_VERSION" ]; then
            corepack prepare "pnpm@${PNPM_VERSION}" --activate
          else
            corepack prepare pnpm@9 --activate
          fi

      - name: Show tool versions
        run: |
          node -v
          pnpm --version

      - name: Configure pnpm store dir for stable caching
        run: pnpm config set store-dir ~/.pnpm-store

      - name: Assert pnpm version
        run: node .github/scripts/assert-pnpm-version.mjs

      - name: Cache pnpm store
        uses: actions/cache@v4
        with:
          path: ~/.pnpm-store
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build app for visual updates
        env:
          NEXT_TELEMETRY_DISABLED: '1'
        run: pnpm -s e2e:build

      - name: Start app for visual run
        env:
          NEXT_TELEMETRY_DISABLED: '1'
        run: |
          pnpm -s exec tsx scripts/start-test.ts --port 3000 &
          echo $! > /tmp/next.pid

      - name: Wait for app
        run: npx wait-on http://127.0.0.1:3000

      - name: Update snapshots
        run: pnpm -s visual:update

      - name: Verify updated snapshots
        timeout-minutes: 50
        run: pnpm -s visual:test

      - name: Commit snapshot changes
        run: |
          if [[ -n "$(git status --porcelain)" ]]; then
            git config user.email "actions@users.noreply.github.com"
            git config user.name "github-actions"
            git add tests/admin-login-legal-visual.spec.ts-snapshots/
            git commit -m "test(visual): update admin login legal snapshots [ci skip]"
            git push
          else
            echo "No snapshot changes to commit."
          fi

      - name: Stop app
        if: always()
        run: |
          if [ -f /tmp/next.pid ]; then
            kill "$(cat /tmp/next.pid)" || true
          fi
